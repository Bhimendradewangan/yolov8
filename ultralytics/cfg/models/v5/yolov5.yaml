# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv5 object detection model with P3-P5 outputs. For details see https://docs.ultralytics.com/models/yolov5

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov5n.yaml' will call yolov5.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]
  s: [0.33, 0.50, 1024]
  m: [0.67, 0.75, 1024]
  l: [1.00, 1.00, 1024]
  x: [1.33, 1.25, 1024]

# YOLOv5 v6.0 backbone
backbone:
  core: &core_bb
    # [from, number, module, args]
    0: [-1, 1, Conv, [64, 6, 2, 2]] # 0-P1/2
    1: [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
    2: [-1, 3, C3, [128]]
    3: [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
    4: [-1, 6, C3, [256]]
    5: [-1, 1, Conv, [512, 3, 2]] # 5-P4/16
    6: [-1, 9, C3, [512]]

  base: &base_bb
    <<: *core_bb
    7: [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32
    8: [-1, 3, C3, [1024]]

  p6: &p6_bb
    <<: *core_bb
    7: [-1, 1, Conv, [768, 3, 2]] # 7-P5/32
    8: [-1, 3, C3, [768]]
    9: [-1, 1, Conv, [1024, 3, 2]] # 9-P6/64
    10: [-1, 3, C3, [1024]]

  sppf: &sppf
    11: [-1, 1, SPPF, [1024, 5]] # 9

  bb-base: &bb-base
    <<: [*base_bb, *sppf]

  bb-p6: &bb_p6
    <<: [*p6_bb, *sppf]

# YOLOv5 v6.0 head
neck:

  p6-base: &p6_base
    12: [-1, 1, Conv, [768, 1, 1]]
    13: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    14: [[-1, 8], 1, Concat, [1]] # cat backbone P5
    15: [-1, 3, C3, [768, False]] # 15

  core: &core_neck
    16: [-1, 1, Conv, [512, 1, 1]]
    17: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    18: [[-1, 6], 1, Concat, [1]] # cat backbone P4
    19: [-1, 3, C3, [512, False]] # 13

    20: [-1, 1, Conv, [256, 1, 1]]
    21: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    22: [[-1, 4], 1, Concat, [1]] # cat backbone P3
    23: [-1, 3, C3, [256, False]] # 17 (P3/8-small)

  tail: &tail
    24: [-1, 1, Conv, [256, 3, 2]]
    25: [[-1, 14], 1, Concat, [1]] # cat head P4
    26: [-1, 3, C3, [512, False]] # 20 (P4/16-medium)

    27: [-1, 1, Conv, [512, 3, 2]]
    28: [[-1, 10], 1, Concat, [1]] # cat head P5
    29: [-1, 3, C3, [1024, False]] # 23 (P5/32-large)

  p6-tail: &p6_tail
    24: [-1, 1, Conv, [256, 3, 2]]
    25: [[-1, 20], 1, Concat, [1]] # cat head P4
    26: [-1, 3, C3, [512, False]] # 26 (P4/16-medium)

    27: [-1, 1, Conv, [512, 3, 2]]
    28: [[-1, 16], 1, Concat, [1]] # cat head P5
    29: [-1, 3, C3, [768, False]] # 29 (P5/32-large)

    30: [-1, 1, Conv, [768, 3, 2]]
    31: [[-1, 12], 1, Concat, [1]] # cat head P6
    32: [-1, 3, C3, [1024, False]] # 32 (P6/64-xlarge)

  base-nk: &base_neck
    <<: [*core_neck, *tail]
  
  p6-nk: &p6_neck
    <<: [*p6_base, *core_neck, *p6_tail]

head:
  detect: &detect_base
    33: [[17, 20, 23], 1, Detect, [nc]] # Detect(P3, P4, P5)
  
  detect-p6: &detect_p6
    33: [[23, 26, 29, 32], 1, Detect, [nc]] # Detect(P3, P4, P5, P6)

yolov5:
  <<: [*bb-base, *base_neck, *detect_base]
  task: "detect"

yolov5-p6:
  <<: [*bb_p6, *p6_neck, *detect_p6]
  task: "detect"
