# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
kpt_shape: &kpt [17, 3] # number of keypoints, number of dims (2 for x,y or 3 for x,y,visible)

scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024] # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  s: [0.33, 0.50, 1024] # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  m: [0.67, 0.75, 768] # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  l: [1.00, 1.00, 512] # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  x: [1.00, 1.25, 512] # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

# YOLOv8.0 backbone
backbone:
  core: &core_bb
     # [from, repeats, module, args]
    0: [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
    1: [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
    2: [-1, 3, C2f, [128, True]]
    3: [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
    4: [-1, 6, C2f, [256, True]]
    5: [-1, 1, Conv, [512, 3, 2]] # 5-P4/16
    6: [-1, 6, C2f, [512, True]]
  
  ghost-core: &ghost_core_bb
    0: [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
    1: [-1, 1, GhostConv, [128, 3, 2]] # 1-P2/4
    2: [-1, 3, C3Ghost, [128, True]]
    3: [-1, 1, GhostConv, [256, 3, 2]] # 3-P3/8
    4: [-1, 6, C3Ghost, [256, True]]
    5: [-1, 1, GhostConv, [512, 3, 2]] # 5-P4/16
    6: [-1, 6, C3Ghost, [512, True]]
  
  resnet-core: &resnet_core_bb
    0: [-1, 1, ResNetLayer, [3, 64, 1, True, 1]] # 0-P1/2
    1: [-1, 1, ResNetLayer, [64, 64, 1, False, 3]] # 1-P2/4
    2: [-1, 1, ResNetLayer, [256, 128, 2, False, 4]] # 2-P3/8
  
  resnet50: &resnet50_bb
    <<: *resnet_core_bb
    3: [-1, 1, ResNetLayer, [512, 256, 2, False, 6]] # 3-P4/16
    4: [-1, 1, ResNetLayer, [1024, 512, 2, False, 3]] # 4-P5/32
  
  resnet101: &resnet101_bb
    <<: *resnet_core_bb
    3: [-1, 1, ResNetLayer, [512, 256, 2, False, 23]] # 3-P4/16
    4: [-1, 1, ResNetLayer, [1024, 512, 2, False, 3]] # 4-P5/32
  
  base: &base_bb
    <<: *core_bb
    7: [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32
    8: [-1, 3, C2f, [1024, True]]
  
  ghost-base: &ghost_base_bb
    <<: *ghost_core_bb
    7: [-1, 1, GhostConv, [1024, 3, 2]] # 7-P5/32
    8: [-1, 3, C3Ghost, [1024, True]]

  p6: &p6_bb
    <<: *core_bb
    7: [-1, 1, Conv, [768, 3, 2]] # 7-P5/32
    8: [-1, 3, C2f, [768, True]]
    9: [-1, 1, Conv, [1024, 3, 2]] # 9-P6/64
    10: [-1, 3, C2f, [1024, True]]
  
  ghost-p6: &ghost_p6
    <<: *ghost_core_bb
    7: [-1, 1, GhostConv, [768, 3, 2]] # 7-P5/32
    8: [-1, 3, C3Ghost, [768, True]]
    9: [-1, 1, GhostConv, [1024, 3, 2]] # 9-P6/64
    10: [-1, 3, C3Ghost, [1024, True]]

  sppf: &sppf
    11: [-1, 1, SPPF, [1024, 5]] # 9

  bb-base: &bb_base
    <<: [*base_bb, *sppf]

  bb-ghost: &bb_ghost
    <<: [*ghost_base_bb, *sppf]

  bb-p2: &bb_p2
    <<: [*base_bb, *sppf]
  
  bb-ghost-p2: &bb_ghost_p2
    <<: [*ghost_base_bb, *sppf]

  bb-p6: &bb_p6
    <<: [*p6_bb, *sppf]
  
  bb-ghost-p6: &bb_ghost_p6
    <<: [*ghost_p6, *sppf]

neck:
  core: &core_neck
    12: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    13: [[-1, 6], 1, Concat, [1]] # cat backbone P4
    14: [-1, 3, C2f, [512]] # 12

    15: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    16: [[-1, 4], 1, Concat, [1]] # cat backbone P3
    17: [-1, 3, C2f, [256]] # 15 (P3/8-small)

  p2: &p2_neck
    18: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    19: [[-1, 2], 1, Concat, [1]] # cat backbone P2
    20: [-1, 3, C2f, [128]] # 18 (P2/4-xsmall)

    21: [-1, 1, Conv, [128, 3, 2]]
    22: [[-1, 15], 1, Concat, [1]] # cat head P3
    23: [-1, 3, C2f, [256]] # 21 (P3/8-small)

  base: &base_neck
    24: [-1, 1, Conv, [256, 3, 2]]
    25: [[-1, 12], 1, Concat, [1]] # cat head P4
    26: [-1, 3, C2f, [512]] # 18 (P4/16-medium)
    
    27: [-1, 1, Conv, [512, 3, 2]]
    28: [[-1, 9], 1, Concat, [1]] # cat head P5
    29: [-1, 3, C2f, [1024]] # 21 (P5/32-large)
  
  ghost-core: &ghost_core_neck
    12: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    13: [[-1, 6], 1, Concat, [1]] # cat backbone P4
    14: [-1, 3, C3Ghost, [512]] # 12

    15: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    16: [[-1, 4], 1, Concat, [1]] # cat backbone P3
    17: [-1, 3, C3Ghost, [256]] # 15 (P3/8-small)
  
  ghost-p2: &ghost_p2_neck
    18: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    19: [[-1, 2], 1, Concat, [1]] # cat backbone P2
    20: [-1, 3, C3Ghost, [128]] # 18 (P2/4-xsmall)

    21: [-1, 1, GhostConv, [128, 3, 2]]
    22: [[-1, 15], 1, Concat, [1]] # cat head P3
    23: [-1, 3, C3Ghost, [256]] # 21 (P3/8-small)

  ghost_base: &ghost_base_neck
    24: [-1, 1, GhostConv, [256, 3, 2]]
    25: [[-1, 12], 1, Concat, [1]] # cat head P4
    26: [-1, 3, C3Ghost, [512]] # 18 (P4/16-medium)

    27: [-1, 1, GhostConv, [512, 3, 2]]
    28: [[-1, 9], 1, Concat, [1]] # cat head P5
    29: [-1, 3, C3Ghost, [1024]] # 21 (P5/32-large)

  world-n1: &world_n1
    12: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    13: [[-1, 6], 1, Concat, [1]] # cat backbone P4
    14: [-1, 3, C2fAttn, [512, 256, 8]] # 12

    15: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    16: [[-1, 4], 1, Concat, [1]] # cat backbone P3
    17: [-1, 3, C2fAttn, [256, 128, 4]] # 15 (P3/8-small)

  world-n2: &world_n2
    18: [[15, 12, 9], 1, ImagePoolingAttn, [256]] # 16 (P3/8-small)

  world-n3: &world_n3
    24: [15, 1, Conv, [256, 3, 2]]
    25: [[-1, 12], 1, Concat, [1]] # cat head P4
    26: [-1, 3, C2fAttn, [512, 256, 8]] # 19 (P4/16-medium)

    27: [-1, 1, Conv, [512, 3, 2]]
    28: [[-1, 9], 1, Concat, [1]] # cat head P5
    29: [-1, 3, C2fAttn, [1024, 512, 16]] # 22 (P5/32-large)
  
  worldv2: &worldv2_nk
    <<: [*world_n1, *world_n3]

  p6-neck: &p6_neck
    12: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    13: [[-1, 8], 1, Concat, [1]] # cat backbone P5
    14: [-1, 3, C2, [768, False]] # 14

    15: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    16: [[-1, 6], 1, Concat, [1]] # cat backbone P4
    17: [-1, 3, C2, [512, False]] # 17

    18: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    19: [[-1, 4], 1, Concat, [1]] # cat backbone P3
    20: [-1, 3, C2, [256, False]] # 20 (P3/8-small)

    21: [-1, 1, Conv, [256, 3, 2]]
    22: [[-1, 17], 1, Concat, [1]] # cat head P4
    23: [-1, 3, C2, [512, False]] # 23 (P4/16-medium)

    27: [-1, 1, Conv, [512, 3, 2]]
    28: [[-1, 14], 1, Concat, [1]] # cat head P5
    29: [-1, 3, C2, [768, False]] # 26 (P5/32-large)

    30: [-1, 1, Conv, [768, 3, 2]]
    31: [[-1, 11], 1, Concat, [1]] # cat head P6
    32: [-1, 3, C2, [1024, False]] # 29 (P6/64-xlarge)
  
  ghost-p6-neck: &ghost_p6_neck
    12: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    13: [[-1, 8], 1, Concat, [1]] # cat backbone P5
    14: [-1, 3, C3Ghost, [768]] # 14

    15: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    16: [[-1, 6], 1, Concat, [1]] # cat backbone P4
    17: [-1, 3, C3Ghost, [512]] # 17

    18: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
    19: [[-1, 4], 1, Concat, [1]] # cat backbone P3
    20: [-1, 3, C3Ghost, [256]] # 20 (P3/8-small)

    21: [-1, 1, GhostConv, [256, 3, 2]]
    22: [[-1, 17], 1, Concat, [1]] # cat head P4
    23: [-1, 3, C3Ghost, [512]] # 23 (P4/16-medium)

    27: [-1, 1, GhostConv, [512, 3, 2]]
    28: [[-1, 14], 1, Concat, [1]] # cat head P5
    29: [-1, 3, C3Ghost, [768]] # 26 (P5/32-large)

    30: [-1, 1, GhostConv, [768, 3, 2]]
    31: [[-1, 11], 1, Concat, [1]] # cat head P6
    32: [-1, 3, C3Ghost, [1024]] # 29 (P6/64-xlarge)

  nk-base: &nk_base
    <<: [*core_neck, *base_neck]
  
  nk-p2: &nk_p2
    <<: [*core_neck, *p2_neck, *base_neck]
  
  nk-p6: &nk_p6
    <<: *p6_neck
  
  nk-world: &nk_world
    <<: [*world_n1, *world_n2, *world_n3]
  
  nk-worldv2: &nk_worldv2
    <<: *worldv2_nk
  
  nk-ghost: &nk_ghost
    <<: [*ghost_core_neck, *ghost_base_neck]
  
  nk-ghost-p2: &nk_ghost_p2
    <<: [*ghost_core_neck, *ghost_p2_neck, *ghost_base_neck]
  
  nk-ghost-p6: &nk_ghost_p6
    <<: *ghost_p6_neck

head:
  
  detect: 
    base: &detect_base
      30: [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5)

    p2: &detect_p2
      30: [[18, 21, 24, 27], 1, Detect, [nc]] # Detect(P2, P3, P4, P5)

    p6: &detect_p6
      33: [[20, 23, 26, 29], 1, Detect, [nc]] # Detect(P3, P4, P5, P6)

  segment: 
    base: &segment_base
      30: [[15, 18, 21], 1, Segment, [nc, 32, 256]] # Segment(P3, P4, P5)

    p2: &segment_p2
      30: [[18, 21, 24, 27], 1, Segment, [nc, 32, 256]] # Segment(P2, P3, P4, P5)

    p6: &segment_p6
      33: [[20, 23, 26, 29], 1, Segment, [nc, 32, 256]] # Segment(P3, P4, P5, P6)

  pose: 
    base: &pose_base
      30: [[15, 18, 21], 1, Pose, [nc, *kpt]] # Pose(P3, P4, P5)

    p2: &pose_p2
      30: [[18, 21, 24, 27], 1, Pose, [nc, *kpt]] # Pose(P2, P3, P4, P5)

    p6: &pose_p6
      33: [[20, 23, 26, 29], 1, Pose, [nc, *kpt]] # Pose(P3, P4, P5, P6)
  
  cls: &cls
    9: [-1, 1, Classify, [nc]] # Classify
  
  obb:
    base: &obb_base
      30: [[15, 18, 21], 1, OBB, [nc, 1]] # OBB(P3, P4, P5)
    
    p2: &obb_p2
      30: [[18, 21, 24, 27], 1, OBB, [nc, 1]] # OBB(P2, P3, P4, P5)
    
    p6: &obb_p6
      33: [[20, 23, 26, 29], 1, OBB, [nc, 1]] # OBB(P3, P4, P5, P6)

  world: &world
    30: [[15, 19, 22], 1, WorldDetect, [nc, 512, False]] # Detect(P3, P4, P5)

  worldv2: &worldv2
    30: [[15, 18, 21], 1, WorldDetect, [nc, 512, True]] # Detect(P3, P4, P5)
  
  rtdetr: &rtdetr
    30: [[15, 18, 21], 1, RTDETRDecoder, [nc]] # Detect(P3, P4, P5)

# ---YOLOv8-Detect---
yolov8:
  <<: [*bb_base, *nk_base, *detect_base]
  task: detect

yolov8-p2:
  <<: [*bb_p2, *nk_p2, *detect_p2]
  task: detect

yolov8-p6:
  <<: [*bb_p6, *nk_p6, *detect_p6]
  task: detect

# ---YOLOv8-Ghost---
yolov8-ghost:
  <<: [*bb_ghost, *nk_ghost, *detect_base]
  task: detect

yolov8-ghost-p2:
  <<: [*bb_ghost_p2, *nk_ghost_p2, *detect_p2]
  task: detect

yolov8-ghost-p6:
  <<: [*bb_ghost_p6, *nk_ghost_p6, *detect_p6]
  task: detect

# ---YOLOv8-Segment---
yolov8-seg:
  <<: [*bb_base, *nk_base, *segment_base]
  task: segment

yolov8-seg-p2:
  <<: [*bb_p2, *nk_p2, *segment_p2]
  task: segment

yolov8-seg-p6:
  <<: [*bb_p6, *nk_p6, *segment_p6]
  task: segment

# ---YOLOv8-Pose---
yolov8-pose:
  <<: [*bb_base, *nk_base, *pose_base]
  task: pose

yolov8-pose-p2:
  <<: [*bb_p2, *nk_p2, *pose_p2]
  task: pose

yolov8-pose-p6:
  <<: [*bb_p6, *nk_p6, *pose_p6]
  task: pose

# ---YOLOv8-OBB---
yolov8-obb:
  <<: [*bb_base, *nk_base, *obb_base]
  task: obb

yolov8-obb-p2:
  <<: [*bb_p2, *nk_p2, *obb_p2]
  task: obb

yolov8-obb-p6:
  <<: [*bb_p6, *nk_p6, *obb_p6]
  task: obb

# ---YOLOv8-Classify---
yolov8-cls:
  <<: [*base_bb, *cls]
  task: classify
  nc: 1000

# ---YOLOv8-Classify-resnet---
yolov8-cls-resnet50:
  <<: [*resnet50_bb, *cls]
  task: classify
  nc: 1000

yolov8-cls-resnet101:
  <<: [*resnet101_bb, *cls]
  task: classify
  nc: 1000

# ---YOLOv8-Worldv1---
yolov8-world:
  <<: [*bb_base, *nk_world, *world]
  task: detect

# ---YOLOv8-Worldv2---
yolov8-worldv2:
  <<: [*bb_base, *nk_worldv2, *worldv2]
  task: detect

# ---YOLOv8-RTDETR---
yolov8-rtdetr:
  <<: [*bb_base, *nk_base, *rtdetr]
  task: detect